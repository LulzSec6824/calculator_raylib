# CMake on multiple platforms

name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-latest
          - windows-latest
        build_type: [Release]
        c_compiler: 
          - gcc
          - clang
          - cl
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    container: ${{ matrix.os == 'ubuntu-latest' && 'fedora:latest' || '' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: dnf install -y cmake gcc gcc-c++ clang clang++ make raylib-devel

    - name: Install vcpkg and raylib (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        git clone https://github.com/Microsoft/vcpkg $env:GITHUB_WORKSPACE/vcpkg
        & "$env:GITHUB_WORKSPACE/vcpkg/bootstrap-vcpkg.bat"
        & "$env:GITHUB_WORKSPACE/vcpkg/vcpkg" install raylib:x64-windows

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ matrix.os == 'windows-latest' && format('-DCMAKE_TOOLCHAIN_FILE={0}/vcpkg/scripts/buildsystems/vcpkg.cmake', github.workspace) || '' }}
        -S .

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package Artifact
      shell: bash
      run: |
        mkdir release
        cp ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/ray${{ matrix.os == 'windows-latest' && '.exe' || '' }} release/
        cp -r ${{ steps.strings.outputs.build-output-dir }}/resource release/
        zip -r ${{ matrix.os }}-raylib-calculator.zip release/

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-artifact
        path: ${{ matrix.os }}-raylib-calculator.zip

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ubuntu-latest-artifact/ubuntu-latest-raylib-calculator.zip
        asset_name: ubuntu-raylib-calculator.zip
        asset_content_type: application/zip

    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/windows-latest-artifact/windows-latest-raylib-calculator.zip
        asset_name: windows-raylib-calculator.zip
        asset_content_type: application/zip
